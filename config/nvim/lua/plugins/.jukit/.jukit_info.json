{"cmd": "local g = vim.g\nlocal map = vim.keymap.set\n\nlocal function check_env_var()\n  local conda_env_name = os.getenv(\"CONDA_PREFIX\")\n  conda_env_name = conda_env_name:sub(-5)\n  print(conda_env_name)\n  if conda_env_name == \"r_env\" then\n    g.jukit_shell_cmd = \"R\"\n    map(\"n\", \"<leader>os\", '<cmd>call jukit#splits#output(\"conda activate r_env\")<cr>', { desc = \"Open output split\" })\n  elseif conda_env_name == \"johan_env\" then\n    g.jukit_shell_cmd = \"R\"\n    map(\n      \"n\",\n      \"<leader>os\",\n      '<cmd>call jukit#splits#output(\"conda activate johan_env\")<cr>',\n      { desc = \"Open output split\" }\n    )\n  else\n    g.jukit_shell_cmd = \"ipython3\"\n    map(\"n\", \"<leader>os\", '<cmd>call jukit#splits#output(\"conda activate\")<cr>', { desc = \"Open output split\" })\n  end\nend\n\nreturn {\n  {\n    \"luk400/vim-jukit\",\n    lazy = true,\n    keys = {\n      { \"<leader>os\", '<cmd>call jukit#splits#output(\"conda activate r_env\")<cr>', { desc = \"Open output split\" } },\n    },\n    -- cond = vim.env.VAR_NAME == 0,\n    ft = {\n      \"ipynb\",\n      \"jupyter\",\n    },\n  },\n  check_env_var(),\n}", "cmd_opts": " --cell_id=NONE -s", "import_complete": 1, "terminal": "nvimterm"}